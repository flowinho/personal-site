<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-06-06T18:40:48+02:00</updated><id>/feed.xml</id><title type="html">der flo</title><subtitle>Gewidmet meinen wundervollen Töchtern.</subtitle><entry><title type="html">How-to: Nightly Builds für Jekyll Blogs mit GitHub Actions umsetzen</title><link href="/2021/03/21/nightly-builds-mit-jekyll-und-github-actions.html" rel="alternate" type="text/html" title="How-to: Nightly Builds für Jekyll Blogs mit GitHub Actions umsetzen" /><published>2021-03-21T00:00:00+01:00</published><updated>2021-03-21T00:00:00+01:00</updated><id>/2021/03/21/nightly-builds-mit-jekyll-und-github-actions</id><content type="html" xml:base="/2021/03/21/nightly-builds-mit-jekyll-und-github-actions.html">&lt;p&gt;Dieser Post ist eine Art selbst-validierendes Experiment. Geschrieben am 20.03.2021, aber &lt;em&gt;datiert&lt;/em&gt; auf den 21.03.2021. Das bedeutet er wird nur im Blog sichtbar, 
wenn heute Nacht, 00:00 GMT+1 die entsprechende GitHub Action aktiv wird und diesen Blog baut. Hoffen wir dass es klappt! 🤞🏻😊&lt;/p&gt;

&lt;h2 id=&quot;warum-nightly-builds-für-einen-blog&quot;&gt;Warum Nightly Builds für einen Blog?&lt;/h2&gt;

&lt;p&gt;Die Antwort ist sehr simpel: um Beiträge planen zu können. Jekyll Blogs sind statische Webseiten, die in aller Regel durch einen Githook auf das “Push” Event auf einen Branch, normalerweise &lt;code&gt;master&lt;/code&gt;, gebaut und deployed werden. Statische Webseiten sind deshalb so toll, weil sie über keinerlei Datenbanken oder sonstiges Backends verfügen, die die Auslieferung oder Anzeige der Seite bremsen könnten.&lt;/p&gt;

&lt;p&gt;Doch statische Webseiten hab auch Nachteile. So lassen sich beispielsweise ohne Continuous Integration bzw. Nightly Builds keine Beiträge einplanen. Denn selbst wenn ein Post, wie dieser hier, ein zukünftiges Datum trägt, wird die statische Seite nur bei jedem Push gebaut. Wer also nicht jede Nacht manuell einen push durchführen möchte, braucht eine Pipeline, die idealerweise Nachts um 00:00 Uhr oder 03:00 Uhr läuft.&lt;/p&gt;

&lt;p&gt;Des weiteren eignen sich Jekyll Builds über GitHub Actions besonders gut für GitHub-Pages, da auf diese Weise die von Microsoft definierten Blacklist von Jekyll-Plugins und Ruby-Gems umgehen werden kann.&lt;/p&gt;

&lt;p&gt;Dieser Post wird eine solche Pipeline für einen Jekyll Blog mittels GitHub Actions umsetzen, das Prinzip lässt sich aber auf beliebige Integrations-Services ausweiten.&lt;/p&gt;

&lt;h2 id=&quot;github-actions--jekyll--️&quot;&gt;GitHub Actions + Jekyll = ❤️&lt;/h2&gt;

&lt;p&gt;GitHub Actions funktioniert sehr straigtforward mittels einer &lt;code&gt;.yml&lt;/code&gt;-Datei. Wer bereits Berührung mit alternativen Build-Systemen hatte wird diese Form der Konfiguration kennen. Wir starten also in dem wir im Ordner &lt;code&gt;.github/workflows/&lt;/code&gt; eine neue Datei für unsere Action anlegen, beispielsweise &lt;code&gt;github-pages.yml&lt;/code&gt;. Die .yml-Datei für diesen Blog kann &lt;a href=&quot;https://github.com/flowinho/my-blog/blob/master/.github/workflows/github-pages.yml&quot;&gt;hier&lt;/a&gt; eingesehen werden.&lt;/p&gt;

&lt;p&gt;Hier nun der kommentierte Inhalt von &lt;code&gt;github-pages.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;name: GitHub Actions Nightly Build

# Das Keyword `on` definiert das Event welches die Action startet.
on:
  push:                     # Sobald ein neuer Commit auf einen beliebigen Branch gepushed wurde.
  schedule:                 # Build mittels cron-Syntax einplanen.
    - cron: &quot;1 6 * * *&quot;     # Morgens, 06:01 Uhr UTC

# Das Keyword `jobs` definiert die auszuführenden Schritte.
jobs:
  jekyll:
    runs-on: ubuntu-16.04   # Zielsystem, ein Docker-Container.
    steps:
    - uses: actions/checkout@v2 # Eine Basis-Action, die es erlaubt Code aus dem Repository 
                                # in dem die Action definiert wurde auszuchecken.

    # Cached den Container um die Buildzeit drastisch zu verkürzen. Erste Build ca 3min, danach ~40s.
    - uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles(&apos;**/Gemfile&apos;) }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Der eigentliche Jekyll Build
    - uses:  helaili/jekyll-action@v2       # Eine GitHub-Action, gewartet von einem Mitglied des Jekyll-Teams.
      with:                                 # Das AccessToken um den Build auszuführen.
        token: ${{ secrets.GITHUB_TOKEN }}
        target_branch: &apos;gh-pages&apos;           # Diese Branchspezifikation ist notwendig, um den bestehenden Branch zu überschreiben.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kleines Schmankerl: GitHub Actions zeigt die Auflösung der eingetragenen Cron-Syntax als Popup an.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-21-github-actions-cron-popover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nach dem Datei erstellt und befüllt wurde sollten wir sie über “Start Commit” im Webinterface oder einen &lt;code&gt;git push&lt;/code&gt; ins Repository speichern. Dieser Vorgang führt auch gleich zu einer initialen Ausführung der Action.&lt;/p&gt;

&lt;p&gt;Wer die Actions die diesen Blog bauen in Aktion sehen möchte, kann sie jederzeit gerne &lt;a href=&quot;https://github.com/flowinho/my-blog/actions/runs/672710303&quot;&gt;hier&lt;/a&gt; betrachten.&lt;/p&gt;

&lt;p&gt;Zurücklehnen und genießen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-21-github-action-jekyll.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nun muss noch ein evtl. bestehendes GitHub-Pages Environment vom Repository entfernt werden, damit die Action genutzt wird, und nicht das default Environment.&lt;/p&gt;

&lt;p&gt;Und wenn alles geklappt hat,  taucht dieser Post morgen in meinem devDiary auf! 🖖🏻&lt;/p&gt;</content><author><name></name></author><category term="derEntwickler" /><category term="yml" /><summary type="html">Dieser Post ist eine Art selbst-validierendes Experiment. Geschrieben am 20.03.2021, aber datiert auf den 21.03.2021. Das bedeutet er wird nur im Blog sichtbar, wenn heute Nacht, 00:00 GMT+1 die entsprechende GitHub Action aktiv wird und diesen Blog baut. Hoffen wir dass es klappt! 🤞🏻😊</summary></entry><entry><title type="html">GTD, Kanban, Scrum — Alle starten mit derselben Grundidee</title><link href="/2021/03/07/gtd-kanban-scrum-alle-dieselbe-idee.html" rel="alternate" type="text/html" title="GTD, Kanban, Scrum — Alle starten mit derselben Grundidee" /><published>2021-03-07T00:00:00+01:00</published><updated>2021-03-07T00:00:00+01:00</updated><id>/2021/03/07/gtd-kanban-scrum-alle-dieselbe-idee</id><content type="html" xml:base="/2021/03/07/gtd-kanban-scrum-alle-dieselbe-idee.html">&lt;p&gt;Der heutige Dschungel an digitalen Inhalten überfällt uns manchmal völlig unvorbereitet. Witzige, aber nutzlose Videos und ernste Fragen werden per Messenger geschickt, Emails kommen im Minutentakt, und unser Instagram-Feed erzeugt Lust darauf ein neues Rezept auszuprobieren. Selbst nach Feierabend trudeln auf unseren privaten Smartphones weiter Mails ein: Versandbestätigungen, Rechnungen und all die Newsletter, von denen wir uns nicht abmelden, sondern lieber täglich auf „Löschen“ tippen. Die meisten dieser Inhalte erreichen uns mit derselben Priorität, unsortiert und teilweise fast schon chaotisch und in ihrer Menge manchmal regelrecht überfordernd.&lt;/p&gt;

&lt;p&gt;Doch was davon ist relevant? Auf welche Dinge sollten wir reagieren? Welche Mail ist nützlich für später, und wann entsteht echter Handlungsbedarf? Wie beurteilt man all das überhaupt?&lt;/p&gt;

&lt;p&gt;Die Beurteilung, Kategorisierung und Einplanung von tatsächlichen Aufgaben werden in den verschiedenen Systemen unterschiedlich angegangen. Es gibt starre Systeme, es gibt flexible Systeme und es gibt Herangehensweise die nur ein Rahmenkonstrukt vorgeben und dem Nutzer ermöglichen sollen seine eigene Organisationsstruktur zu finden und zu kultivieren.&lt;/p&gt;

&lt;p&gt;Aber einen sehr prägnanten Aspekt haben die meisten Organisationssysteme gemeinsam, nämlich den Versuch die Flut an Eindrücken, Anfragen und Inhalten zu bändigen. Dies geschieht über eine zentrale Ablage für all diese Dinge: die oft sogenannte „Inbox“.
Die Inbox — eine Kiste für alle Gedanken, Aufgaben und potentiellen Vorhaben&lt;/p&gt;

&lt;p&gt;Das Prinzip „Inbox“ gründet auf der Annahme, dass wir alle ständig Ideen, Einfälle oder Erinnerungen haben, auf die reagiert werden sollte — nur eben nie zum gerade jetzt passenden Zeitpunkt. Hier ein paar beispielhafte Gedankengänge und ein beispielhafter, unpassender Zeitpunkt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;„Ich sollte morgen dringend meine Ärztin anrufen und nach meinem schmerzenden Ohren schauen lassen“ — Während dem Geschirrspülen.&lt;/li&gt;
  &lt;li&gt;„Es wäre echt toll, dieses Jahr einen Zelturlaub zu machen.“ — Während einem Spaziergang.&lt;/li&gt;
  &lt;li&gt;„Ich sollte noch diese Woche meine alten BlueRays auf eBay verkaufen.“ — Während dem Filmabend mit dem Partner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diese Liste lässt sich ewig fortführen, und den meisten werden derartige Situationen völlig bekannt vorkommen. Doch wohin mit diesen Gedanken? Auf Notizzettel? Auch hier gibt es mehrere Annahmen bezüglich des Umgangs von Menschen mit „spontanen Einfällen“:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Die meisten Menschen „merken“ sich diese Einfälle, um genau diese ein paar Minuten später wieder vergessen zu haben.&lt;/li&gt;
  &lt;li&gt;Manche Menschen „notieren“ sich diese Einfälle, meistens auf oder in was auch immer gerade herumliegt. Bereits Kinder greifen diese Methode in der Schule auf, indem sie wichtige Dinge beispielsweise auf ihrer Handfläche notieren.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Die meisten dieser Gedanken lassen sich kategorisieren, beispielsweise in:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dinge die man irgendwann mal erledigen / erleben möchte.&lt;/li&gt;
  &lt;li&gt;Dinge die zu einem bestimmten Zeitpunkt erledigt sein sollten.&lt;/li&gt;
  &lt;li&gt;Informationen die für eine bestimmte Tätigkeit entweder zeitnah oder irgendwann einmal relevant sein könnten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ihnen allen liegt die zentrale Aussage zugrunde, dass diese Gedanken zwar relevant sind, aber oft nicht in den aktuellen Moment gehören, nicht zur aktuellen Tätigkeit passen, oder einfach nur ablenken können. Daraus resultiert die Notwendigkeit diese Gedanken und Einfälle in einem Werkzeug abzulegen, dem man vertraut und dass einem ermöglicht, diese Gedanken zu einem späteren Zeitpunkt noch einmal anzuschauen und sie passend zur eigenen Selbstorganisationsmethode, noch einmal kritisch zu betrachten.&lt;/p&gt;

&lt;p&gt;Wie genau sich diese Gedanken dann aber genau organisieren, formatieren und einsortieren lassen — damit beschäftigen sich die verschiedensten Produktivitäts-Gurus seit Jahrzehnten. Meistens resultieren diese Recherchen und Überlegungen in der Geburt eines oder mehrerer Selbst-Organisationssysteme, wie beispielsweise „Personal Kanban“, „Time Blocking“, „G.T.D“ oder das „Time Sector System“, die wir an dieser Stelle aber nicht näher beleuchten wollen.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ist dieser Gedanke überhaupt noch relevant? Was genau ist das? Kann ich mit „Garage entrümpeln“ überhaupt anfangen? Oder brauche ich nicht vorher einen Anhänger?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Genau diese Herangehensweise der „Wiedervorlage“ ermöglicht es, die eigenen Einfälle nicht nur als wertvoll zu betrachten, sondern sie auch aus Situationen, in denen sie aktuell keinen Mehrwert generieren, herauszulösen und sich dabei sicher zu sein dass sie für einen späteren, passenderen Zeitpunkt nicht vergessen werden.&lt;/p&gt;

&lt;p&gt;Dieses Prinzip ist die „Inbox“.&lt;/p&gt;

&lt;p&gt;Aber wie geht man mit „digitalen Gedanken“ um? Also Dingen, die uns andere Menschen per Messenger oder Email in unser Leben werfen und entwedersagen: „Erledig das!“ oder „Lies / schau das! Wichtig! Witzig! Süß! Verrückt!“&lt;/p&gt;

&lt;p&gt;Auch diese können in einer Inbox abgelegt und später einmal betrachtet werden. Manchmal ist es genau richtig, gerade diese Inhalte nicht sofort zu konsumieren bzw. auchnicht sofort auf jede Email zu reagieren, sondern eben erst später, zu einem geeigneteren Zeitpunkt, noch einmal reflektiert sagen zu können: Ist das jetzt wirklich relevant? Will ich hierfür meine Zeit verwenden?&lt;/p&gt;

&lt;p&gt;Eine abschließende, persönliche Anmerkung: Durch die heutige Kommunikation über Messenger wie Signal, Wire und leider auch Telegram &amp;amp; WhatsApp ist es Standard geworden dass Menschen sich kurzweilige Inhalte hin und her schicken mit der Erwartung das Gegenüber betrachtet und bewertet diese Inhalte. Adam Alter beschreibt in seinem Buch Irresistible dieses Verhalten mit „der Suche nach sofortiger Belohnung“ (engl. „the search for instant gratification“). Der Hauptgedanke dabei ist, dass die Sucht nach digitalen Medien das Verhalten hervorbringt sich gegenseitig Eindrücke zu schicken, um dafür Lob und Anerkennung zu ernten (engl. „social proof“). Prinzipiell heftet diesem Verhalten nichts verwerfliches an, schließlich wollen auch Links zu potentiellen Sicherheitslücken in Routern, wichtigen Nachrichten oder ähnlichem ausgetauscht werden. Ohne das eine oder andere Katzenvideo wäre die Welt auch um einiges grauer. Dennoch birgt das anhaltende Betrachten solcher kurzweiliger Inhalte große Risiken, die Adam Alter in seinem Buch wissenschaftlich erforscht und ergründet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Das Entstehen einer Sucht nach digitalen Inhalten, inklusive Entzugserscheinungen.&lt;/li&gt;
  &lt;li&gt;Der langfristige Abbau der Konzentrationsfähigkeit.&lt;/li&gt;
  &lt;li&gt;Die Förderungen von unsozialem Verhalten.&lt;/li&gt;
  &lt;li&gt;Und weitere Beobachtungen, die ich potentiellen Lesern nicht vorwegnehmen möchte.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wer aufmerksam die Medien betrachtet, wird feststellen, dass überhöhter Medienkonsum ein großes Problem unserer heutigen Gesellschaft ist. Mit diesem neuen Bewusstsein fällt es uns vielleicht leichter, TikTok einmal geschlossen zu lassen und zu schreiben: „Schau ich mir später an.“&lt;/p&gt;</content><author><name></name></author><category term="derPodcaster" /><category term="gtd" /><category term="inbox" /><category term="produktivität" /><category term="kanban" /><summary type="html">Der heutige Dschungel an digitalen Inhalten überfällt uns manchmal völlig unvorbereitet. Witzige, aber nutzlose Videos und ernste Fragen werden per Messenger geschickt, Emails kommen im Minutentakt, und unser Instagram-Feed erzeugt Lust darauf ein neues Rezept auszuprobieren. Selbst nach Feierabend trudeln auf unseren privaten Smartphones weiter Mails ein: Versandbestätigungen, Rechnungen und all die Newsletter, von denen wir uns nicht abmelden, sondern lieber täglich auf „Löschen“ tippen. Die meisten dieser Inhalte erreichen uns mit derselben Priorität, unsortiert und teilweise fast schon chaotisch und in ihrer Menge manchmal regelrecht überfordernd.</summary></entry><entry><title type="html">Fünf Gründe weshalb ich so schlecht bin in LOL Wild Rift</title><link href="/2021/01/31/fuenf-grunde-warum-ich-schlecht-bin-in-wild-rift.html" rel="alternate" type="text/html" title="Fünf Gründe weshalb ich so schlecht bin in LOL Wild Rift" /><published>2021-01-31T00:00:00+01:00</published><updated>2021-01-31T00:00:00+01:00</updated><id>/2021/01/31/fuenf-grunde-warum-ich-schlecht-bin-in-wild-rift</id><content type="html" xml:base="/2021/01/31/fuenf-grunde-warum-ich-schlecht-bin-in-wild-rift.html">&lt;p&gt;Viele von uns wollen besser werden in irgendeinem Spiel. Für manche von uns heißt dieses Spiel League of Legends: Wild Rift. Auch ich will besser werden. Denn ich spiele schlecht. Aktuell hohes Silber, eher niedriges Gold.&lt;/p&gt;

&lt;p&gt;Wie kommt das?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ich spiele ohne Skins. Jeder weiß, dass League of Legends: Wild Rift reines Pay-to-Win ist und ich ohne Skins nicht weit genug kommen kann. Insofern steht mir mein Geiz im Weg.&lt;/li&gt;
  &lt;li&gt;Ich helfe meinem Teammates. Dumme Idee. League of Legends war, ist, und bleibt, ein Einzelspielerspiel.&lt;/li&gt;
  &lt;li&gt;Ich achte auf die Mini-Map. Würde ich nicht dauernd auf diese verfluchte Karte schauen und nach dem gegnerischen Jungler Ausschau halten wäre ich nicht so vom eigentlichen Spielgeschehen abgelenkt.&lt;/li&gt;
  &lt;li&gt;Ich spiele auf Objectives — nicht Kills. Viele freundliche Mitspieler haben mich bereits des Öfteren darauf hingewiesen, aber es will einfach nicht in meinen Kopf: Gegner töten ist wichtiger als das Spiel zu gewinnen.&lt;/li&gt;
  &lt;li&gt;Ich chatte zu wenig. Oft habe ich das Gefühl ich könnte viele Spiele noch rumreißen in dem ich das Team motiviere, Streits schlichte und meine Teammates Frage wie ihr Tag heute so war.&lt;/li&gt;
  &lt;li&gt;Bonusgrund: Meine Champions sind nicht sexy genug. Ein schwerer Fehler. Hätten die Figuren die ich spiele größere Brüste (ernsthaft, Zed, was soll das?!) würde ich mich in meiner Männlichkeit beflügelt fühlen und deshalb besser zocken.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ich hoffe ich kann diese Aspekte verbessern, sonst sieht es wirklich schlecht aus mit meinen Season-Rewards….&lt;/p&gt;</content><author><name></name></author><category term="derPodcaster" /><category term="games" /><category term="iphone" /><category term="league" /><category term="of" /><category term="legends" /><summary type="html">Viele von uns wollen besser werden in irgendeinem Spiel. Für manche von uns heißt dieses Spiel League of Legends: Wild Rift. Auch ich will besser werden. Denn ich spiele schlecht. Aktuell hohes Silber, eher niedriges Gold.</summary></entry><entry><title type="html">How-to: Alle Blogposts mit einem bestimmten Schlagwort auflisten</title><link href="/2021/01/28/auflistung-aller-posts-mit-einem-tag.html" rel="alternate" type="text/html" title="How-to: Alle Blogposts mit einem bestimmten Schlagwort auflisten" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/auflistung-aller-posts-mit-einem-tag</id><content type="html" xml:base="/2021/01/28/auflistung-aller-posts-mit-einem-tag.html">&lt;p&gt;Diese Aufgabe lässt sich in Liquid mit Hilfe von ein paar Schleifen und if-else-statements lösen.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Falls die Seite posts beinhaltet&lt;/li&gt;
  &lt;li&gt;durchlaufe alle Posts&lt;/li&gt;
  &lt;li&gt;falls ein Post Schlagworte beinhaltet&lt;/li&gt;
  &lt;li&gt;durch alle Schlagworte dieses Posts&lt;/li&gt;
  &lt;li&gt;wenn auf eines der Schlagwörter zB. &lt;code&gt;.swift&lt;/code&gt; zutrifft&lt;/li&gt;
  &lt;li&gt;stelle ein HTML mit Liquid dar.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{%- for post in site.posts -%}
    {%- if post.tags.size &amp;gt; 0 -%}
        {%- for tag in post.tags -%}
            {%- if tag == &quot;.swift&quot; -%}
                // Render HTML
            {% endif %}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term="html" /><category term="liquid" /><summary type="html">Diese Aufgabe lässt sich in Liquid mit Hilfe von ein paar Schleifen und if-else-statements lösen.</summary></entry><entry><title type="html">How-to: Prims.js innerhalb eines Jekyll blogs nutzen</title><link href="/2021/01/28/how-prismjs-in-jekyll-nutzen.html" rel="alternate" type="text/html" title="How-to: Prims.js innerhalb eines Jekyll blogs nutzen" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-prismjs-in-jekyll-nutzen</id><content type="html" xml:base="/2021/01/28/how-prismjs-in-jekyll-nutzen.html">&lt;p&gt;Ein sehr kurzes How-To welches kurz erläutern soll, wie man &lt;a href=&quot;https://prismjs.com&quot;&gt;prismjs&lt;/a&gt; in einen Blog integriert der auf Jekyll basiert.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Konfiguriere dein Paket und lade es herunter.&lt;/li&gt;
  &lt;li&gt;Kopiere die Dateien in deinen Jekyll blog.&lt;/li&gt;
  &lt;li&gt;Importiere das Stylesheet und Javascript im &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; Element deiner Website.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ein Beispiel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/main.css&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/prism/prism.css&quot;&amp;gt;
    &amp;lt;script src=&quot;/prism/prism.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optional: Einstellung der Schriftgröße in prism.css.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;code[class*=&quot;language-&quot;],
pre[class*=&quot;language-&quot;] {
	color: black;
	background: none;
	text-shadow: 0 1px white;
	font-family: Consolas, Monaco, &apos;Andale Mono&apos;, &apos;Ubuntu Mono&apos;, monospace;
	font-size: 0.9em;   // war 1em
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	line-height: 1.5;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term="html" /><category term="css" /><summary type="html">Ein sehr kurzes How-To welches kurz erläutern soll, wie man prismjs in einen Blog integriert der auf Jekyll basiert.</summary></entry><entry><title type="html">How-to: Einbinden einer eigenen Schriftart in das Jekyll Standard-Thema Minima</title><link href="/2021/01/28/how-to-einbindung-custom-font-jekyll-minima.html" rel="alternate" type="text/html" title="How-to: Einbinden einer eigenen Schriftart in das Jekyll Standard-Thema Minima" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-to-einbindung-custom-font-jekyll-minima</id><content type="html" xml:base="/2021/01/28/how-to-einbindung-custom-font-jekyll-minima.html">&lt;p&gt;Das Thema Minima welches Jekyll als Grunddesign dient ist sehr schön, allerdings bin ich ein großer Fan der Open-Source Schrift &lt;a href=&quot;https://sourcefoundry.org/hack/&quot;&gt;Hack&lt;/a&gt;. Ich möchte dass dieser Blog in dieser Schriftart erstrahlt, vielleicht nicht alles, zumindest aber die Code-Snippets.&lt;/p&gt;

&lt;p&gt;Aufgrund mangelnder Erfahrung mit scss hat das Ganze etwas länger gedauert als erwartet…..&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lade Hack auf deinen Computer und extrahiere die Dateien in das Verzeichnis in dem sich dein Jekyll-Blog befindet.&lt;/li&gt;
  &lt;li&gt;Platziere die heruntergeladenen &lt;code&gt;*.ttf&lt;/code&gt; Dateien in &lt;code&gt;&amp;lt;deinVerzeichnis&amp;gt;/assets/hack/&lt;/code&gt;. Falls &lt;code&gt;/assets&lt;/code&gt; nicht existiert, erstelle ihn.&lt;/li&gt;
  &lt;li&gt;Erstelle eine &lt;code&gt;.scss&lt;/code&gt; Datei die den Namen der einzubindenden Schriftart trägt innerhalb von &lt;code&gt;_sass&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Importiere &lt;code&gt;hack.scss&lt;/code&gt; in &lt;code&gt;_sass/minima.scss&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Fertig.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import
  &quot;hack&quot;,
  &quot;minima/base&quot;,
  &quot;minima/layout&quot;
;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inhalt von &lt;code&gt;hack.scss&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@font-face {
  font-family: &apos;Hack&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Regular.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 400;
  font-style: normal;
} 

@font-face {
  font-family: &apos;Hack-Bold&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Bold.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: &apos;Hack-Italic&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Italic.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: &apos;Hack-BoldItalic&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-BoldItalic.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 700;
  font-style: italic;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kleinere Anpassungen an &lt;code&gt;prismjs.css&lt;/code&gt; um die Schriftart in Snippets zu verkleinern:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;code[class*=&quot;language-&quot;],
pre[class*=&quot;language-&quot;] {
	// omitted
	font-family: &apos;Hack&apos;, Consolas, Monaco, &apos;Andale Mono&apos;, &apos;Ubuntu Mono&apos;, monospace;
	font-size: 0.9em;
	// omitted
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term="scss" /><category term="css" /><summary type="html">Das Thema Minima welches Jekyll als Grunddesign dient ist sehr schön, allerdings bin ich ein großer Fan der Open-Source Schrift Hack. Ich möchte dass dieser Blog in dieser Schriftart erstrahlt, vielleicht nicht alles, zumindest aber die Code-Snippets.</summary></entry><entry><title type="html">How-to: Darstellung von Tags in Jekyll posts</title><link href="/2021/01/28/how-to-darstellung-von-tags-in-jekyll.html" rel="alternate" type="text/html" title="How-to: Darstellung von Tags in Jekyll posts" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-to-darstellung-von-tags-in-jekyll</id><content type="html" xml:base="/2021/01/28/how-to-darstellung-von-tags-in-jekyll.html">&lt;p&gt;Ah, endlich etwas eye-candy! Als erstes sollten wir, wenn nicht bereits geschehen, eine Kopie des &lt;code&gt;posts.html&lt;/code&gt; Layouts unserer aktuellen Jekyll Theme anlegen, in dem wir diese aus dem Minima-Ordner nach &lt;code&gt;_layout/post.md&lt;/code&gt; kopieren.&lt;/p&gt;

&lt;p&gt;Jetzt suchen wir uns die Stelle innerhalb des Templates in dem die Tags angezeigt werden sollen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;header class=&quot;post-header&quot;&amp;gt;
    &amp;lt;h1 class=&quot;post-title p-name&quot; itemprop=&quot;name headline&quot;&amp;gt;How-to: Darstellung von Tags in Jekyll posts&amp;lt;/h1&amp;gt;
    &amp;lt;p class=&quot;post-meta&quot;&amp;gt;
      &amp;lt;time class=&quot;dt-published&quot; datetime=&quot;2021-01-28T00:00:00+01:00&quot; itemprop=&quot;datePublished&quot;&amp;gt;Jan 28, 2021
      &amp;lt;/time&amp;gt;//
      // Vielleicht hier??!
      //
    &amp;lt;/p&amp;gt;
  &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 1&lt;/strong&gt;: Die Tags sollen nur sichtbar sein, wenn wirklich Tags vergeben. Das ist recht einfach umzusetzen durch einen Zugriff auf die liquid-collection &lt;code&gt;page.tags&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{% if page.tags.size &amp;gt; 0 %}
  // do something
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 2&lt;/strong&gt;: Plural – Wir sollten ein “s” hinzufügen, falls mehr als ein Tag gefunden wurde.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 3&lt;/strong&gt;: Alle Tags mit Hilfe der &lt;code&gt;filter&lt;/code&gt; Funktionen von Liquid auflisten:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{{ page.tags | sort | join: &quot;, &quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Alles zusammen:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{% if page.tags.size &amp;gt; 0 %}
  Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}: {{ page.tags | sort | join: &quot;, &quot; }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das volle Snippet sieht am Ende so aus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p class=&quot;post-meta&quot;&amp;gt;
    &amp;lt;time class=&quot;dt-published&quot; datetime=&quot;2021-01-28T00:00:00+01:00&quot; itemprop=&quot;datePublished&quot;&amp;gt;
    {%- assign date_format = site.minima.date_format | default: &quot;%b %-d, %Y&quot; -%}
    {{ page.date | date: date_format }}
    &amp;lt;/time&amp;gt;
    {%- if page.author -%}
    • &amp;lt;span itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&amp;gt;&amp;lt;span class=&quot;p-author h-card&quot; itemprop=&quot;name&quot;&amp;gt;{{ page.author }}&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
    {%- endif -%}
    {% if page.tags.size &amp;gt; 0 %}
        - Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}: {{ page.tags | sort | join: &quot;, &quot; }}
    {% endif %}
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term="scss" /><category term="css" /><category term="html" /><category term="liquid" /><summary type="html">Ah, endlich etwas eye-candy! Als erstes sollten wir, wenn nicht bereits geschehen, eine Kopie des posts.html Layouts unserer aktuellen Jekyll Theme anlegen, in dem wir diese aus dem Minima-Ordner nach _layout/post.md kopieren.</summary></entry><entry><title type="html">Vorbild sein: Sollten wir mit unseren Sprach-Assistenten freundlicher umgehen?</title><link href="/2021/01/06/sollten-wir-mit-sprachassistenten-freundlicher-sein.html" rel="alternate" type="text/html" title="Vorbild sein: Sollten wir mit unseren Sprach-Assistenten freundlicher umgehen?" /><published>2021-01-06T00:00:00+01:00</published><updated>2021-01-06T00:00:00+01:00</updated><id>/2021/01/06/sollten-wir-mit-sprachassistenten-freundlicher-sein</id><content type="html" xml:base="/2021/01/06/sollten-wir-mit-sprachassistenten-freundlicher-sein.html">&lt;p&gt;Vater sein bedeutet, Vorbild zu sein. Sicherlich ist das manchmal nicht einfach, öfter als gewünscht spiegelt das Verhalten der Kinder die Wahrheit: dass eben nicht alles gelingen kann.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dass Erziehung durch die Vorbildfunktion nicht immer so einfach ist, wie es klingen mag.&lt;/li&gt;
  &lt;li&gt;Dass besonders wir Erwachsene uns vielleicht den einen anderen Gedanken in die falsche Richtung machen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In meinem Alltag mit den Kindern spielt aktuell das Thema “Bitte &amp;amp; Danke”  eine etwas stärker betonte Rolle. Und ja, ich gestehe: auch mir war das unsäglich idiotische “Wie sagt man” das erste und letzte Mal herausgerutscht — die Reaktion der Kinder kam umgehend. Ungeachtet dieses Ausrutschers möchte ich gerne mit gutem Beispiel meinen Kindern vorangehen und den beiden eben nicht vorschreiben, welchen Floskeln sie zu welchem Zeitpunkt zu sagen haben, sondern durch mein eigenes Verhalten die Werte vermitteln, die mir wichtig sind.&lt;/p&gt;

&lt;p&gt;Neulich wurde mir an einem gemütlichen Abend ein Verhalten gespiegelt, an welches ich gar nicht gedacht hatte. Ein Kommentar, den ich so nicht erwartet hatte, der mich stark ins Grübeln brachte und den ich gerne mit den anderen Vätern und Müttern teilen möchte:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Sag mal, findest du es nicht auch erschreckend, dass wir Menschen zueinander höflich sind, du zu [deinem HomePod Mini] Siri aber niemals Bitte und Danke sagst Das schnappen die Kinder doch auf.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eine interessante Frage. Wenn ich so darüber nachdenke klingen Sätze wie „Hey Siri, kannst du bitte die Lautstärke erhöhen?” oder “Hey Siri, könntest du bitte Bleed from Within spielen, wenn es dir keine Umstände bereitet?” einfach merkwürdig.&lt;/p&gt;

&lt;p&gt;Aber was, wenn Kinder anwesend sind? Differenzieren meine Töchter zwischen dem Umgang untereinander und mit anderen Menschen und dem Umgang mit Siri? Was ist Siri überhaupt für die beiden? Ein Lebewesen? Eine Frau am anderen Ende der Leitung?&lt;/p&gt;

&lt;p&gt;Letztendlich ist es egal, ob Siri für meine Töchter Magie, eine Frau, die am Telefon sitzt, ein Zauberwesen oder ein Roboter ist, was im Alltag zählt, ist mein Umgang mit diesem Sprachassistent. Nicht falsch verstehen. Es geht mir nicht darum, Kindern ein Vorbild im Umgang mit Maschinen zu sein, ebenfalls geht es mir in diesem Post nicht um mediale Erziehung.&lt;/p&gt;

&lt;p&gt;Der Sprachgebrauch ist allerdings entscheidend. Der Wunsch meinen Kindern den Mehrwert von Höflichkeit zu vermitteln, wird unterwandert, wenn ich meine Ausdrucksweise nicht anpasse. Selbstverständlich ist Siri nur eine Maschine. Aber wie bei jeder Technologie, die Menschen imitiert, muss ich mir auch hier die Frage stellen: Wie nehmen meine Kinder diese Technologie wahr?&lt;/p&gt;

&lt;p&gt;Ich für meinen Teil werde die kommende Zeit versuchen, höflicher zu Siri zu sein. Und vielleicht regt dieser Artikel auch andere Eltern etwas dazu an, über ihren bewussten Umgang mit menschen-ähnlicher Technologie in Anwesenheit der Kinder noch einmal nachzudenken.&lt;/p&gt;</content><author><name></name></author><category term="derPapa" /><category term="erziehung" /><category term="kinder" /><category term="siri" /><category term="technologie" /><category term="vorbild" /><summary type="html">Vater sein bedeutet, Vorbild zu sein. Sicherlich ist das manchmal nicht einfach, öfter als gewünscht spiegelt das Verhalten der Kinder die Wahrheit: dass eben nicht alles gelingen kann.</summary></entry></feed>