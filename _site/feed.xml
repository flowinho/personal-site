<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-05-26T23:37:25+02:00</updated><id>/feed.xml</id><title type="html">der flo</title><subtitle>Gewidmet meinen wundervollen T√∂chtern.</subtitle><entry><title type="html">How-to: Nightly Builds f√ºr Jekyll Blogs mit GitHub Actions umsetzen</title><link href="/2021/03/21/nightly-builds-mit-jekyll-und-github-actions.html" rel="alternate" type="text/html" title="How-to: Nightly Builds f√ºr Jekyll Blogs mit GitHub Actions umsetzen" /><published>2021-03-21T00:00:00+01:00</published><updated>2021-03-21T00:00:00+01:00</updated><id>/2021/03/21/nightly-builds-mit-jekyll-und-github-actions</id><content type="html" xml:base="/2021/03/21/nightly-builds-mit-jekyll-und-github-actions.html">&lt;p&gt;Dieser Post ist eine Art selbst-validierendes Experiment. Geschrieben am 20.03.2021, aber &lt;em&gt;datiert&lt;/em&gt; auf den 21.03.2021. Das bedeutet er wird nur im Blog sichtbar, 
wenn heute Nacht, 00:00 GMT+1 die entsprechende GitHub Action aktiv wird und diesen Blog baut. Hoffen wir dass es klappt! ü§ûüèªüòä&lt;/p&gt;

&lt;h2 id=&quot;warum-nightly-builds-f√ºr-einen-blog&quot;&gt;Warum Nightly Builds f√ºr einen Blog?&lt;/h2&gt;

&lt;p&gt;Die Antwort ist sehr simpel: um Beitr√§ge planen zu k√∂nnen. Jekyll Blogs sind statische Webseiten, die in aller Regel durch einen Githook auf das ‚ÄúPush‚Äù Event auf einen Branch, normalerweise &lt;code&gt;master&lt;/code&gt;, gebaut und deployed werden. Statische Webseiten sind deshalb so toll, weil sie √ºber keinerlei Datenbanken oder sonstiges Backends verf√ºgen, die die Auslieferung oder Anzeige der Seite bremsen k√∂nnten.&lt;/p&gt;

&lt;p&gt;Doch statische Webseiten hab auch Nachteile. So lassen sich beispielsweise ohne Continuous Integration bzw. Nightly Builds keine Beitr√§ge einplanen. Denn selbst wenn ein Post, wie dieser hier, ein zuk√ºnftiges Datum tr√§gt, wird die statische Seite nur bei jedem Push gebaut. Wer also nicht jede Nacht manuell einen push durchf√ºhren m√∂chte, braucht eine Pipeline, die idealerweise Nachts um 00:00 Uhr oder 03:00 Uhr l√§uft.&lt;/p&gt;

&lt;p&gt;Des weiteren eignen sich Jekyll Builds √ºber GitHub Actions besonders gut f√ºr GitHub-Pages, da auf diese Weise die von Microsoft definierten Blacklist von Jekyll-Plugins und Ruby-Gems umgehen werden kann.&lt;/p&gt;

&lt;p&gt;Dieser Post wird eine solche Pipeline f√ºr einen Jekyll Blog mittels GitHub Actions umsetzen, das Prinzip l√§sst sich aber auf beliebige Integrations-Services ausweiten.&lt;/p&gt;

&lt;h2 id=&quot;github-actions--jekyll--Ô∏è&quot;&gt;GitHub Actions + Jekyll = ‚ù§Ô∏è&lt;/h2&gt;

&lt;p&gt;GitHub Actions funktioniert sehr straigtforward mittels einer &lt;code&gt;.yml&lt;/code&gt;-Datei. Wer bereits Ber√ºhrung mit alternativen Build-Systemen hatte wird diese Form der Konfiguration kennen. Wir starten also in dem wir im Ordner &lt;code&gt;.github/workflows/&lt;/code&gt; eine neue Datei f√ºr unsere Action anlegen, beispielsweise &lt;code&gt;github-pages.yml&lt;/code&gt;. Die .yml-Datei f√ºr diesen Blog kann &lt;a href=&quot;https://github.com/flowinho/my-blog/blob/master/.github/workflows/github-pages.yml&quot;&gt;hier&lt;/a&gt; eingesehen werden.&lt;/p&gt;

&lt;p&gt;Hier nun der kommentierte Inhalt von &lt;code&gt;github-pages.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;name: GitHub Actions Nightly Build

# Das Keyword `on` definiert das Event welches die Action startet.
on:
  push:                     # Sobald ein neuer Commit auf einen beliebigen Branch gepushed wurde.
  schedule:                 # Build mittels cron-Syntax einplanen.
    - cron: &quot;1 6 * * *&quot;     # Morgens, 06:01 Uhr UTC

# Das Keyword `jobs` definiert die auszuf√ºhrenden Schritte.
jobs:
  jekyll:
    runs-on: ubuntu-16.04   # Zielsystem, ein Docker-Container.
    steps:
    - uses: actions/checkout@v2 # Eine Basis-Action, die es erlaubt Code aus dem Repository 
                                # in dem die Action definiert wurde auszuchecken.

    # Cached den Container um die Buildzeit drastisch zu verk√ºrzen. Erste Build ca 3min, danach ~40s.
    - uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles(&apos;**/Gemfile&apos;) }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Der eigentliche Jekyll Build
    - uses:  helaili/jekyll-action@v2       # Eine GitHub-Action, gewartet von einem Mitglied des Jekyll-Teams.
      with:                                 # Das AccessToken um den Build auszuf√ºhren.
        token: ${{ secrets.GITHUB_TOKEN }}
        target_branch: &apos;gh-pages&apos;           # Diese Branchspezifikation ist notwendig, um den bestehenden Branch zu √ºberschreiben.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kleines Schmankerl: GitHub Actions zeigt die Aufl√∂sung der eingetragenen Cron-Syntax als Popup an.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-21-github-actions-cron-popover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nach dem Datei erstellt und bef√ºllt wurde sollten wir sie √ºber ‚ÄúStart Commit‚Äù im Webinterface oder einen &lt;code&gt;git push&lt;/code&gt; ins Repository speichern. Dieser Vorgang f√ºhrt auch gleich zu einer initialen Ausf√ºhrung der Action.&lt;/p&gt;

&lt;p&gt;Wer die Actions die diesen Blog bauen in Aktion sehen m√∂chte, kann sie jederzeit gerne &lt;a href=&quot;https://github.com/flowinho/my-blog/actions/runs/672710303&quot;&gt;hier&lt;/a&gt; betrachten.&lt;/p&gt;

&lt;p&gt;Zur√ºcklehnen und genie√üen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-21-github-action-jekyll.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nun muss noch ein evtl. bestehendes GitHub-Pages Environment vom Repository entfernt werden, damit die Action genutzt wird, und nicht das default Environment.&lt;/p&gt;

&lt;p&gt;Und wenn alles geklappt hat,  taucht dieser Post morgen in meinem devDiary auf! üññüèª&lt;/p&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".yml" /><summary type="html">Dieser Post ist eine Art selbst-validierendes Experiment. Geschrieben am 20.03.2021, aber datiert auf den 21.03.2021. Das bedeutet er wird nur im Blog sichtbar, wenn heute Nacht, 00:00 GMT+1 die entsprechende GitHub Action aktiv wird und diesen Blog baut. Hoffen wir dass es klappt! ü§ûüèªüòä</summary></entry><entry><title type="html">Lazy Loading f√ºr Bilder zu einem Jekyll blog hinzuf√ºgen</title><link href="/2021/03/20/lazy-loading-images-in-jekyll.html" rel="alternate" type="text/html" title="Lazy Loading f√ºr Bilder zu einem Jekyll blog hinzuf√ºgen" /><published>2021-03-20T00:00:00+01:00</published><updated>2021-03-20T00:00:00+01:00</updated><id>/2021/03/20/lazy-loading-images-in-jekyll</id><content type="html" xml:base="/2021/03/20/lazy-loading-images-in-jekyll.html">&lt;p&gt;Es folgt ein 5.44 MB grosses Bild.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-20-%20david-troeger-9XzyEzPAHMI-unsplash.jpg&quot; alt=&quot;&quot; class=&quot;lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jetlag?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;David Troeger&lt;/a&gt; on &lt;a href=&quot;/t/wallpapers?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aber l√§d das Foto auch wirklich erst &lt;em&gt;nach&lt;/em&gt; der eigentlichen Seite und ihrem Content? Ein Blick in den Network-Tab der Firefox Dev-Tools verr√§t die Antwort: Ja! Die Webseite wird geladen und angezeigt &lt;em&gt;bevor&lt;/em&gt; das Bild selbst abgefragt wird.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-03-20-browser-network-performance.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;M√∂glich wird diese Herangehensweise durch die Javascript-Library &lt;a href=&quot;https://github.com/aFarkas/lazysizes/blob/gh-pages/README.md&quot;&gt;LazySizes&lt;/a&gt;. Alle &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; oder &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; Elemente die mit der Klasse &lt;code&gt;lazyload&lt;/code&gt; gekennzeichnet werden implementieren lazy loading. Es geht kaum einfacher!&lt;/p&gt;

&lt;p&gt;Aber wie l√§sst sich diese Herangehensweise in Jekyll nutzen, wenn der Buildhost GitHub Pages ist? Gl√ºcklicherweise bietet uns Liquid die M√∂glichkeit, Markdown-Elemente mit css-Klassen zu versehen. Das obige Bild beispielsweise nutzt folgenden Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;![](/assets/posts/2021-03-20-%20david-troeger-9XzyEzPAHMI-unsplash.jpg){:class=&quot;lazyload&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die spezifische, optionale Angabe der Klasse ist von mir sehr erw√ºnscht, da ich nicht jedes einzelne Bild auf diese Weise laden m√∂chte, sondern nur sehr gro√üe Dateien.&lt;/p&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".html" /><category term=".js" /><summary type="html">Es folgt ein 5.44 MB grosses Bild.</summary></entry><entry><title type="html">How-to: Alle Blogposts mit einem bestimmten Schlagwort auflisten</title><link href="/2021/01/28/auflistung-aller-posts-mit-einem-tag.html" rel="alternate" type="text/html" title="How-to: Alle Blogposts mit einem bestimmten Schlagwort auflisten" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/auflistung-aller-posts-mit-einem-tag</id><content type="html" xml:base="/2021/01/28/auflistung-aller-posts-mit-einem-tag.html">&lt;p&gt;Diese Aufgabe l√§sst sich in Liquid mit Hilfe von ein paar Schleifen und if-else-statements l√∂sen.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Falls die Seite posts beinhaltet&lt;/li&gt;
  &lt;li&gt;durchlaufe alle Posts&lt;/li&gt;
  &lt;li&gt;falls ein Post Schlagworte beinhaltet&lt;/li&gt;
  &lt;li&gt;durch alle Schlagworte dieses Posts&lt;/li&gt;
  &lt;li&gt;wenn auf eines der Schlagw√∂rter zB. &lt;code&gt;.swift&lt;/code&gt; zutrifft&lt;/li&gt;
  &lt;li&gt;stelle ein HTML mit Liquid dar.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{%- for post in site.posts -%}
    {%- if post.tags.size &amp;gt; 0 -%}
        {%- for tag in post.tags -%}
            {%- if tag == &quot;.swift&quot; -%}
                // Render HTML
            {% endif %}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".html" /><category term=".liquid" /><summary type="html">Diese Aufgabe l√§sst sich in Liquid mit Hilfe von ein paar Schleifen und if-else-statements l√∂sen.</summary></entry><entry><title type="html">How-to: Prims.js innerhalb eines Jekyll blogs nutzen</title><link href="/2021/01/28/how-prismjs-in-jekyll-nutzen.html" rel="alternate" type="text/html" title="How-to: Prims.js innerhalb eines Jekyll blogs nutzen" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-prismjs-in-jekyll-nutzen</id><content type="html" xml:base="/2021/01/28/how-prismjs-in-jekyll-nutzen.html">&lt;p&gt;Ein sehr kurzes How-To welches kurz erl√§utern soll, wie man &lt;a href=&quot;https://prismjs.com&quot;&gt;prismjs&lt;/a&gt; in einen Blog integriert der auf Jekyll basiert.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Konfiguriere dein Paket und lade es herunter.&lt;/li&gt;
  &lt;li&gt;Kopiere die Dateien in deinen Jekyll blog.&lt;/li&gt;
  &lt;li&gt;Importiere das Stylesheet und Javascript im &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; Element deiner Website.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ein Beispiel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/main.css&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/prism/prism.css&quot;&amp;gt;
    &amp;lt;script src=&quot;/prism/prism.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optional: Einstellung der Schriftgr√∂√üe in prism.css.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;code[class*=&quot;language-&quot;],
pre[class*=&quot;language-&quot;] {
	color: black;
	background: none;
	text-shadow: 0 1px white;
	font-family: Consolas, Monaco, &apos;Andale Mono&apos;, &apos;Ubuntu Mono&apos;, monospace;
	font-size: 0.9em;   // war 1em
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	line-height: 1.5;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".html" /><category term=".css" /><summary type="html">Ein sehr kurzes How-To welches kurz erl√§utern soll, wie man prismjs in einen Blog integriert der auf Jekyll basiert.</summary></entry><entry><title type="html">How-to: Darstellung von Tags in Jekyll posts</title><link href="/2021/01/28/how-to-darstellung-von-tags-in-jekyll.html" rel="alternate" type="text/html" title="How-to: Darstellung von Tags in Jekyll posts" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-to-darstellung-von-tags-in-jekyll</id><content type="html" xml:base="/2021/01/28/how-to-darstellung-von-tags-in-jekyll.html">&lt;p&gt;Ah, endlich etwas eye-candy! Als erstes sollten wir, wenn nicht bereits geschehen, eine Kopie des &lt;code&gt;posts.html&lt;/code&gt; Layouts unserer aktuellen Jekyll Theme anlegen, in dem wir diese aus dem Minima-Ordner nach &lt;code&gt;_layout/post.md&lt;/code&gt; kopieren.&lt;/p&gt;

&lt;p&gt;Jetzt suchen wir uns die Stelle innerhalb des Templates in dem die Tags angezeigt werden sollen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;header class=&quot;post-header&quot;&amp;gt;
    &amp;lt;h1 class=&quot;post-title p-name&quot; itemprop=&quot;name headline&quot;&amp;gt;How-to: Darstellung von Tags in Jekyll posts&amp;lt;/h1&amp;gt;
    &amp;lt;p class=&quot;post-meta&quot;&amp;gt;
      &amp;lt;time class=&quot;dt-published&quot; datetime=&quot;2021-01-28T00:00:00+01:00&quot; itemprop=&quot;datePublished&quot;&amp;gt;Jan 28, 2021
      &amp;lt;/time&amp;gt;//
      // Vielleicht hier??!
      //
    &amp;lt;/p&amp;gt;
  &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 1&lt;/strong&gt;: Die Tags sollen nur sichtbar sein, wenn wirklich Tags vergeben. Das ist recht einfach umzusetzen durch einen Zugriff auf die liquid-collection &lt;code&gt;page.tags&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{% if page.tags.size &amp;gt; 0 %}
  // do something
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 2&lt;/strong&gt;: Plural ‚Äì Wir sollten ein ‚Äús‚Äù hinzuf√ºgen, falls mehr als ein Tag gefunden wurde.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Schritt 3&lt;/strong&gt;: Alle Tags mit Hilfe der &lt;code&gt;filter&lt;/code&gt; Funktionen von Liquid auflisten:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{{ page.tags | sort | join: &quot;, &quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Alles zusammen:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;{% if page.tags.size &amp;gt; 0 %}
  Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}: {{ page.tags | sort | join: &quot;, &quot; }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das volle Snippet sieht am Ende so aus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p class=&quot;post-meta&quot;&amp;gt;
    &amp;lt;time class=&quot;dt-published&quot; datetime=&quot;2021-01-28T00:00:00+01:00&quot; itemprop=&quot;datePublished&quot;&amp;gt;
    {%- assign date_format = site.minima.date_format | default: &quot;%b %-d, %Y&quot; -%}
    {{ page.date | date: date_format }}
    &amp;lt;/time&amp;gt;
    {%- if page.author -%}
    ‚Ä¢ &amp;lt;span itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&amp;gt;&amp;lt;span class=&quot;p-author h-card&quot; itemprop=&quot;name&quot;&amp;gt;{{ page.author }}&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
    {%- endif -%}
    {% if page.tags.size &amp;gt; 0 %}
        - Tag{% if page.tags.size &amp;gt; 1 %}s{% endif %}: {{ page.tags | sort | join: &quot;, &quot; }}
    {% endif %}
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".scss" /><category term=".css" /><category term=".html" /><category term=".liquid" /><summary type="html">Ah, endlich etwas eye-candy! Als erstes sollten wir, wenn nicht bereits geschehen, eine Kopie des posts.html Layouts unserer aktuellen Jekyll Theme anlegen, in dem wir diese aus dem Minima-Ordner nach _layout/post.md kopieren.</summary></entry><entry><title type="html">How-to: Einbinden einer eigenen Schriftart in das Jekyll Standard-Thema Minima</title><link href="/2021/01/28/how-to-einbindung-custom-font-jekyll-minima.html" rel="alternate" type="text/html" title="How-to: Einbinden einer eigenen Schriftart in das Jekyll Standard-Thema Minima" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/how-to-einbindung-custom-font-jekyll-minima</id><content type="html" xml:base="/2021/01/28/how-to-einbindung-custom-font-jekyll-minima.html">&lt;p&gt;Das Thema Minima welches Jekyll als Grunddesign dient ist sehr sch√∂n, allerdings bin ich ein gro√üer Fan der Open-Source Schrift &lt;a href=&quot;https://sourcefoundry.org/hack/&quot;&gt;Hack&lt;/a&gt;. Ich m√∂chte dass dieser Blog in dieser Schriftart erstrahlt, vielleicht nicht alles, zumindest aber die Code-Snippets.&lt;/p&gt;

&lt;p&gt;Aufgrund mangelnder Erfahrung mit scss hat das Ganze etwas l√§nger gedauert als erwartet‚Ä¶..&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lade Hack auf deinen Computer und extrahiere die Dateien in das Verzeichnis in dem sich dein Jekyll-Blog befindet.&lt;/li&gt;
  &lt;li&gt;Platziere die heruntergeladenen &lt;code&gt;*.ttf&lt;/code&gt; Dateien in &lt;code&gt;&amp;lt;deinVerzeichnis&amp;gt;/assets/hack/&lt;/code&gt;. Falls &lt;code&gt;/assets&lt;/code&gt; nicht existiert, erstelle ihn.&lt;/li&gt;
  &lt;li&gt;Erstelle eine &lt;code&gt;.scss&lt;/code&gt; Datei die den Namen der einzubindenden Schriftart tr√§gt innerhalb von &lt;code&gt;_sass&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Importiere &lt;code&gt;hack.scss&lt;/code&gt; in &lt;code&gt;_sass/minima.scss&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Fertig.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import
  &quot;hack&quot;,
  &quot;minima/base&quot;,
  &quot;minima/layout&quot;
;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inhalt von &lt;code&gt;hack.scss&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@font-face {
  font-family: &apos;Hack&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Regular.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 400;
  font-style: normal;
} 

@font-face {
  font-family: &apos;Hack-Bold&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Bold.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: &apos;Hack-Italic&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-Italic.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: &apos;Hack-BoldItalic&apos;;
  src: local(bttf_font), url(&apos;hack/Hack-BoldItalic.ttf&apos;) format(&apos;opentype&apos;);
  font-weight: 700;
  font-style: italic;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kleinere Anpassungen an &lt;code&gt;prismjs.css&lt;/code&gt; um die Schriftart in Snippets zu verkleinern:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;code[class*=&quot;language-&quot;],
pre[class*=&quot;language-&quot;] {
	// omitted
	font-family: &apos;Hack&apos;, Consolas, Monaco, &apos;Andale Mono&apos;, &apos;Ubuntu Mono&apos;, monospace;
	font-size: 0.9em;
	// omitted
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".scss" /><category term=".css" /><summary type="html">Das Thema Minima welches Jekyll als Grunddesign dient ist sehr sch√∂n, allerdings bin ich ein gro√üer Fan der Open-Source Schrift Hack. Ich m√∂chte dass dieser Blog in dieser Schriftart erstrahlt, vielleicht nicht alles, zumindest aber die Code-Snippets.</summary></entry><entry><title type="html">Meine prism.js Konfiguration f√ºr diese Seite</title><link href="/2021/01/28/meine-primjs-konfiguration.html" rel="alternate" type="text/html" title="Meine prism.js Konfiguration f√ºr diese Seite" /><published>2021-01-28T00:00:00+01:00</published><updated>2021-01-28T00:00:00+01:00</updated><id>/2021/01/28/meine-primjs-konfiguration</id><content type="html" xml:base="/2021/01/28/meine-primjs-konfiguration.html">&lt;p&gt;Hier ist eine Liste mit den in diese Webseite eingebundenen Sprachen, haupts√§chlich um mich selbst daran zu erinnern üòè.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sprache&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Gr√∂√üe&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Markup + HTML + XML + SVG + MathML + SSML + Atom + RSS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.15KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CSS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.38KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C-like&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.69KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JavaScript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.52KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bash + Shell&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.69KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.6KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C#&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.78KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Git&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.23KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP Public-Key-Pins&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.26KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.91KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.ignore + .gitignore + .hgignore + .npmignore&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.33KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON + Web App Manifest&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.44KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.39KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;LaTeX + TeX + ConTeXt&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.01KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Makefile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.86KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Markdown&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.64KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nginx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.64KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Objective-C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.69KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.97KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Regex&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.24KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ruby&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.12KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sass (Sass)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.01KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sass (Scss)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.31KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shell session&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.78KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Swift&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.72KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Wiki markup&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.14KB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;: No plugins.
&lt;strong&gt;Theme&lt;/strong&gt;: default&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total filesize: 56.77KB (96% JavaScript + 4% CSS)&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="derEntwickler" /><category term=".js" /><summary type="html">Hier ist eine Liste mit den in diese Webseite eingebundenen Sprachen, haupts√§chlich um mich selbst daran zu erinnern üòè.</summary></entry></feed>